{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_entrancefee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__LotteryNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lotteryState",
          "type": "uint256"
        }
      ],
      "name": "Lottery__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Lottery__PlayerEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6afee744326272f81ba539f4767a584a0eb692b5e68d595f85118ae9ab139f76",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1297652",
    "logsBloom": "0x
    "blockHash": "0xf461034f4d9b6980cb0de1a936294bca71f9db463ca8b7bd871a8f43d8342ffd",
    "transactionHash": "0x6afee744326272f81ba539f4767a584a0eb692b5e68d595f85118ae9ab139f76",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1297652",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "a91e72d62803b09fa9b92a4f8a4aca24",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_entrancefee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__LotteryNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryState\",\"type\":\"uint256\"}],\"name\":\"Lottery__UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lottery__PlayerEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Lottery__NotEnoughETHEntered();\\nerror Lottery__TransferFailed();\\nerror Lottery__LotteryNotOpen();\\nerror Lottery__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 lotteryState);\\n\\ncontract Lottery is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    enum LotteryState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    uint256 private immutable i_entrancefee;\\n    address payable[] private s_players;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n    uint32 private immutable i_callbackGasLimit;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n\\n    address private s_recentWinner;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n    LotteryState private s_lotteryState;\\n\\n    event Lottery__PlayerEntered(address player, uint256 amount);\\n    event RequestedLotteryWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed player);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 _entrancefee,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entrancefee = _entrancefee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_lotteryState = LotteryState.OPEN;\\n        i_interval = interval;\\n    }\\n\\n    function enterLottery() public payable {\\n        if (msg.value < i_entrancefee) {\\n            revert Lottery__NotEnoughETHEntered();\\n        }\\n        if (s_lotteryState != LotteryState.OPEN) {\\n            revert Lottery__LotteryNotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit Lottery__PlayerEntered(msg.sender, msg.value);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool isOpen = LotteryState.OPEN == s_lotteryState;\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\n        return (upkeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Lottery__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_lotteryState)\\n            );\\n        }\\n        s_lotteryState = LotteryState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedLotteryWinner(requestId);\\n    }\\n\\n    function requestRandomWinner() external {\\n        s_lotteryState = LotteryState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedLotteryWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, /*requestId*/\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_players = new address payable[](0);\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        s_lastTimeStamp = block.timestamp;\\n        s_lotteryState = LotteryState.OPEN;\\n        if (!success) {\\n            revert Lottery__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entrancefee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getLotteryState() public view returns (LotteryState) {\\n        return s_lotteryState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n}\\n\",\"keccak256\":\"0xc9b0e785e7693c0a6284b7c61e315e1b71e34e2ad43a405f4d083e22252bea85\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001a4f38038062001a4f8339818101604052810190620000389190620001a6565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360c081815250508267ffffffffffffffff1660e08167ffffffffffffffff1660c01b815250508163ffffffff166101008163ffffffff1660e01b815250506000600360006101000a81548160ff02191690836001811115620001195762000118620002ae565b5b021790555080610140818152505050505050505062000364565b6000815190506200014481620002e2565b92915050565b6000815190506200015b81620002fc565b92915050565b600081519050620001728162000316565b92915050565b600081519050620001898162000330565b92915050565b600081519050620001a0816200034a565b92915050565b60008060008060008060c08789031215620001c657620001c5620002dd565b5b6000620001d689828a0162000133565b9650506020620001e989828a0162000161565b9550506040620001fc89828a016200014a565b94505060606200020f89828a016200018f565b93505060806200022289828a0162000178565b92505060a06200023589828a0162000161565b9150509295509295509295565b60006200024f8262000260565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002ed8162000242565b8114620002f957600080fd5b50565b620003078162000256565b81146200031357600080fd5b50565b620003218162000280565b81146200032d57600080fd5b50565b6200033b816200028a565b81146200034757600080fd5b50565b62000355816200029a565b81146200036157600080fd5b50565b60805160601c60a05160c05160e05160c01c6101005160e01c6101205160601c61014051611653620003fc6000396000818161082401526108cd0152600081816104c8015261066901526000818161054801526106e901526000818161052501526106c601526000818161050401526106a501526000818161032c01526108f301526000818161035201526103a601526116536000f3fe6080604052600436106100dd5760003560e01c80636b68c03c1161007f578063c1af578511610059578063c1af57851461028b578063c1c244e814610295578063e55ae4e8146102c0578063fd6673f5146102fd576100dd565b80636b68c03c146101f75780636e04ff0d1461022257806391ad27b414610260576100dd565b8063473f1ddc116100bb578063473f1ddc1461015f578063522a1f0b1461018a57806353a2c19a146101a15780635f1b0fd8146101cc576100dd565b806309bc33a7146100e25780631fe543e31461010d5780634585e33b14610136575b600080fd5b3480156100ee57600080fd5b506100f7610328565b6040516101049190611259565b60405180910390f35b34801561011957600080fd5b50610134600480360381019061012f9190611009565b610350565b005b34801561014257600080fd5b5061015d60048036038101906101589190610f19565b610410565b005b34801561016b57600080fd5b50610174610610565b604051610181919061114e565b60405180910390f35b34801561019657600080fd5b5061019f61063a565b005b3480156101ad57600080fd5b506101b66107ae565b6040516101c39190611259565b60405180910390f35b3480156101d857600080fd5b506101e16107bd565b6040516101ee9190611259565b60405180910390f35b34801561020357600080fd5b5061020c6107ca565b604051610219919061123e565b60405180910390f35b34801561022e57600080fd5b5061024960048036038101906102449190610f66565b6107e1565b6040516102579291906111bb565b60405180910390f35b34801561026c57600080fd5b506102756108c9565b6040516102829190611259565b60405180910390f35b6102936108f1565b005b3480156102a157600080fd5b506102aa610a56565b6040516102b79190611259565b60405180910390f35b3480156102cc57600080fd5b506102e760048036038101906102e29190610faf565b610a60565b6040516102f4919061114e565b60405180910390f35b34801561030957600080fd5b50610312610aa7565b60405161031f9190611259565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040257337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103f9929190611169565b60405180910390fd5b61040c8282610ab3565b5050565b600061042a604051806020016040528060008152506107e1565b509050806104995747600080549050600360009054906101000a900460ff16600181111561045b5761045a611533565b5b6040517f6e195f2500000000000000000000000000000000000000000000000000000000815260040161049093929190611274565b60405180910390fd5b6001600360006101000a81548160ff021916908360018111156104bf576104be611533565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105899594939291906111eb565b602060405180830381600087803b1580156105a357600080fd5b505af11580156105b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105db9190610fdc565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6001600360006101000a81548160ff021916908360018111156106605761065f611533565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161072a9594939291906111eb565b602060405180830381600087803b15801561074457600080fd5b505af1158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190610fdc565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600360009054906101000a900460ff16905090565b600060606000600360009054906101000a900460ff16600181111561080957610808611533565b5b6000600181111561081d5761081c611533565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108519190611354565b119050600080600080549050119050600080471190508280156108715750835b801561087a5750805b80156108835750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000034101561094b576040517fec269fd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561095f5761095e611533565b5b600360009054906101000a900460ff16600181111561098157610980611533565b5b146109b8576040517f823ea8bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f760dd919d6d83cc191dec007cff8b97b812ba90ebf43093b07132162705e58543334604051610a4c929190611192565b60405180910390a1565b6000600254905090565b6000808281548110610a7557610a74611562565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b6000808054905082600081518110610ace57610acd611562565b5b6020026020010151610ae091906114a4565b90506000808281548110610af757610af6611562565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610b8057610b7f611591565b5b604051908082528060200260200182016040528015610bae5781602001602082028036833780820191505090505b5060009080519060200190610bc4929190610ce4565b5060008173ffffffffffffffffffffffffffffffffffffffff1647604051610beb90611139565b60006040518083038185875af1925050503d8060008114610c28576040519150601f19603f3d011682016040523d82523d6000602084013e610c2d565b606091505b50509050426002819055506000600360006101000a81548160ff02191690836001811115610c5e57610c5d611533565b5b021790555080610c9a576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610d5d579160200282015b82811115610d5c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610d04565b5b509050610d6a9190610d6e565b5090565b5b80821115610d87576000816000905550600101610d6f565b5090565b6000610d9e610d99846112d0565b6112ab565b90508083825260208201905082856020860282011115610dc157610dc06115ca565b5b60005b85811015610df15781610dd78882610eef565b845260208401935060208301925050600181019050610dc4565b5050509392505050565b6000610e0e610e09846112fc565b6112ab565b905082815260208101848484011115610e2a57610e296115cf565b5b610e35848285611431565b509392505050565b600082601f830112610e5257610e516115c5565b5b8135610e62848260208601610d8b565b91505092915050565b60008083601f840112610e8157610e806115c5565b5b8235905067ffffffffffffffff811115610e9e57610e9d6115c0565b5b602083019150836001820283011115610eba57610eb96115ca565b5b9250929050565b600082601f830112610ed657610ed56115c5565b5b8135610ee6848260208601610dfb565b91505092915050565b600081359050610efe81611606565b92915050565b600081519050610f1381611606565b92915050565b60008060208385031215610f3057610f2f6115d9565b5b600083013567ffffffffffffffff811115610f4e57610f4d6115d4565b5b610f5a85828601610e6b565b92509250509250929050565b600060208284031215610f7c57610f7b6115d9565b5b600082013567ffffffffffffffff811115610f9a57610f996115d4565b5b610fa684828501610ec1565b91505092915050565b600060208284031215610fc557610fc46115d9565b5b6000610fd384828501610eef565b91505092915050565b600060208284031215610ff257610ff16115d9565b5b600061100084828501610f04565b91505092915050565b600080604083850312156110205761101f6115d9565b5b600061102e85828601610eef565b925050602083013567ffffffffffffffff81111561104f5761104e6115d4565b5b61105b85828601610e3d565b9150509250929050565b61106e81611388565b82525050565b61107d8161139a565b82525050565b61108c816113a6565b82525050565b600061109d8261132d565b6110a78185611338565b93506110b7818560208601611440565b6110c0816115de565b840191505092915050565b6110d48161141f565b82525050565b60006110e7600083611349565b91506110f2826115ef565b600082019050919050565b611106816113c3565b82525050565b611115816113f1565b82525050565b611124816113fb565b82525050565b6111338161140b565b82525050565b6000611144826110da565b9150819050919050565b60006020820190506111636000830184611065565b92915050565b600060408201905061117e6000830185611065565b61118b6020830184611065565b9392505050565b60006040820190506111a76000830185611065565b6111b4602083018461110c565b9392505050565b60006040820190506111d06000830185611074565b81810360208301526111e28184611092565b90509392505050565b600060a0820190506112006000830188611083565b61120d602083018761112a565b61121a60408301866110fd565b611227606083018561111b565b611234608083018461111b565b9695505050505050565b600060208201905061125360008301846110cb565b92915050565b600060208201905061126e600083018461110c565b92915050565b6000606082019050611289600083018661110c565b611296602083018561110c565b6112a3604083018461110c565b949350505050565b60006112b56112c6565b90506112c18282611473565b919050565b6000604051905090565b600067ffffffffffffffff8211156112eb576112ea611591565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561131757611316611591565b5b611320826115de565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061135f826113f1565b915061136a836113f1565b92508282101561137d5761137c6114d5565b5b828203905092915050565b6000611393826113d1565b9050919050565b60008115159050919050565b6000819050919050565b60008190506113be826115f2565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600061142a826113b0565b9050919050565b82818337600083830152505050565b60005b8381101561145e578082015181840152602081019050611443565b8381111561146d576000848401525b50505050565b61147c826115de565b810181811067ffffffffffffffff8211171561149b5761149a611591565b5b80604052505050565b60006114af826113f1565b91506114ba836113f1565b9250826114ca576114c9611504565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061160357611602611533565b5b50565b61160f816113f1565b811461161a57600080fd5b5056fea264697066735822122002bf866625035e6f4616398fd59b74dbbfbe98d96f96a8e8f9a1f2ee54da143c64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c80636b68c03c1161007f578063c1af578511610059578063c1af57851461028b578063c1c244e814610295578063e55ae4e8146102c0578063fd6673f5146102fd576100dd565b80636b68c03c146101f75780636e04ff0d1461022257806391ad27b414610260576100dd565b8063473f1ddc116100bb578063473f1ddc1461015f578063522a1f0b1461018a57806353a2c19a146101a15780635f1b0fd8146101cc576100dd565b806309bc33a7146100e25780631fe543e31461010d5780634585e33b14610136575b600080fd5b3480156100ee57600080fd5b506100f7610328565b6040516101049190611259565b60405180910390f35b34801561011957600080fd5b50610134600480360381019061012f9190611009565b610350565b005b34801561014257600080fd5b5061015d60048036038101906101589190610f19565b610410565b005b34801561016b57600080fd5b50610174610610565b604051610181919061114e565b60405180910390f35b34801561019657600080fd5b5061019f61063a565b005b3480156101ad57600080fd5b506101b66107ae565b6040516101c39190611259565b60405180910390f35b3480156101d857600080fd5b506101e16107bd565b6040516101ee9190611259565b60405180910390f35b34801561020357600080fd5b5061020c6107ca565b604051610219919061123e565b60405180910390f35b34801561022e57600080fd5b5061024960048036038101906102449190610f66565b6107e1565b6040516102579291906111bb565b60405180910390f35b34801561026c57600080fd5b506102756108c9565b6040516102829190611259565b60405180910390f35b6102936108f1565b005b3480156102a157600080fd5b506102aa610a56565b6040516102b79190611259565b60405180910390f35b3480156102cc57600080fd5b506102e760048036038101906102e29190610faf565b610a60565b6040516102f4919061114e565b60405180910390f35b34801561030957600080fd5b50610312610aa7565b60405161031f9190611259565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040257337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103f9929190611169565b60405180910390fd5b61040c8282610ab3565b5050565b600061042a604051806020016040528060008152506107e1565b509050806104995747600080549050600360009054906101000a900460ff16600181111561045b5761045a611533565b5b6040517f6e195f2500000000000000000000000000000000000000000000000000000000815260040161049093929190611274565b60405180910390fd5b6001600360006101000a81548160ff021916908360018111156104bf576104be611533565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105899594939291906111eb565b602060405180830381600087803b1580156105a357600080fd5b505af11580156105b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105db9190610fdc565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6001600360006101000a81548160ff021916908360018111156106605761065f611533565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161072a9594939291906111eb565b602060405180830381600087803b15801561074457600080fd5b505af1158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190610fdc565b9050807febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c60405160405180910390a250565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600360009054906101000a900460ff16905090565b600060606000600360009054906101000a900460ff16600181111561080957610808611533565b5b6000600181111561081d5761081c611533565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108519190611354565b119050600080600080549050119050600080471190508280156108715750835b801561087a5750805b80156108835750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000034101561094b576040517fec269fd100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561095f5761095e611533565b5b600360009054906101000a900460ff16600181111561098157610980611533565b5b146109b8576040517f823ea8bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f760dd919d6d83cc191dec007cff8b97b812ba90ebf43093b07132162705e58543334604051610a4c929190611192565b60405180910390a1565b6000600254905090565b6000808281548110610a7557610a74611562565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b6000808054905082600081518110610ace57610acd611562565b5b6020026020010151610ae091906114a4565b90506000808281548110610af757610af6611562565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610b8057610b7f611591565b5b604051908082528060200260200182016040528015610bae5781602001602082028036833780820191505090505b5060009080519060200190610bc4929190610ce4565b5060008173ffffffffffffffffffffffffffffffffffffffff1647604051610beb90611139565b60006040518083038185875af1925050503d8060008114610c28576040519150601f19603f3d011682016040523d82523d6000602084013e610c2d565b606091505b50509050426002819055506000600360006101000a81548160ff02191690836001811115610c5e57610c5d611533565b5b021790555080610c9a576040517f1c94012000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610d5d579160200282015b82811115610d5c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610d04565b5b509050610d6a9190610d6e565b5090565b5b80821115610d87576000816000905550600101610d6f565b5090565b6000610d9e610d99846112d0565b6112ab565b90508083825260208201905082856020860282011115610dc157610dc06115ca565b5b60005b85811015610df15781610dd78882610eef565b845260208401935060208301925050600181019050610dc4565b5050509392505050565b6000610e0e610e09846112fc565b6112ab565b905082815260208101848484011115610e2a57610e296115cf565b5b610e35848285611431565b509392505050565b600082601f830112610e5257610e516115c5565b5b8135610e62848260208601610d8b565b91505092915050565b60008083601f840112610e8157610e806115c5565b5b8235905067ffffffffffffffff811115610e9e57610e9d6115c0565b5b602083019150836001820283011115610eba57610eb96115ca565b5b9250929050565b600082601f830112610ed657610ed56115c5565b5b8135610ee6848260208601610dfb565b91505092915050565b600081359050610efe81611606565b92915050565b600081519050610f1381611606565b92915050565b60008060208385031215610f3057610f2f6115d9565b5b600083013567ffffffffffffffff811115610f4e57610f4d6115d4565b5b610f5a85828601610e6b565b92509250509250929050565b600060208284031215610f7c57610f7b6115d9565b5b600082013567ffffffffffffffff811115610f9a57610f996115d4565b5b610fa684828501610ec1565b91505092915050565b600060208284031215610fc557610fc46115d9565b5b6000610fd384828501610eef565b91505092915050565b600060208284031215610ff257610ff16115d9565b5b600061100084828501610f04565b91505092915050565b600080604083850312156110205761101f6115d9565b5b600061102e85828601610eef565b925050602083013567ffffffffffffffff81111561104f5761104e6115d4565b5b61105b85828601610e3d565b9150509250929050565b61106e81611388565b82525050565b61107d8161139a565b82525050565b61108c816113a6565b82525050565b600061109d8261132d565b6110a78185611338565b93506110b7818560208601611440565b6110c0816115de565b840191505092915050565b6110d48161141f565b82525050565b60006110e7600083611349565b91506110f2826115ef565b600082019050919050565b611106816113c3565b82525050565b611115816113f1565b82525050565b611124816113fb565b82525050565b6111338161140b565b82525050565b6000611144826110da565b9150819050919050565b60006020820190506111636000830184611065565b92915050565b600060408201905061117e6000830185611065565b61118b6020830184611065565b9392505050565b60006040820190506111a76000830185611065565b6111b4602083018461110c565b9392505050565b60006040820190506111d06000830185611074565b81810360208301526111e28184611092565b90509392505050565b600060a0820190506112006000830188611083565b61120d602083018761112a565b61121a60408301866110fd565b611227606083018561111b565b611234608083018461111b565b9695505050505050565b600060208201905061125360008301846110cb565b92915050565b600060208201905061126e600083018461110c565b92915050565b6000606082019050611289600083018661110c565b611296602083018561110c565b6112a3604083018461110c565b949350505050565b60006112b56112c6565b90506112c18282611473565b919050565b6000604051905090565b600067ffffffffffffffff8211156112eb576112ea611591565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561131757611316611591565b5b611320826115de565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600061135f826113f1565b915061136a836113f1565b92508282101561137d5761137c6114d5565b5b828203905092915050565b6000611393826113d1565b9050919050565b60008115159050919050565b6000819050919050565b60008190506113be826115f2565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600061142a826113b0565b9050919050565b82818337600083830152505050565b60005b8381101561145e578082015181840152602081019050611443565b8381111561146d576000848401525b50505050565b61147c826115de565b810181811067ffffffffffffffff8211171561149b5761149a611591565b5b80604052505050565b60006114af826113f1565b91506114ba836113f1565b9250826114ca576114c9611504565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061160357611602611533565b5b50565b61160f816113f1565b811461161a57600080fd5b5056fea264697066735822122002bf866625035e6f4616398fd59b74dbbfbe98d96f96a8e8f9a1f2ee54da143c64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 870,
        "contract": "contracts/lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 887,
        "contract": "contracts/lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 889,
        "contract": "contracts/lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 894,
        "contract": "contracts/lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 0,
        "slot": "3",
        "type": "t_enum(LotteryState)865"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)865": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}